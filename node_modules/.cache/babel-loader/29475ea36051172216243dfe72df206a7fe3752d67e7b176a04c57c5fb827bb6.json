{"ast":null,"code":"var _jsxFileName = \"/Volumes/MacM2/repositorios/json-creator/src/App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Container, Typography, Box, Button, Paper, Grid } from '@mui/material';\nimport FlowView from './FlowView.tsx';\nimport StepConfigEditor from './StepConfigEditor.tsx';\n\n// Botón de importar JSON en la cabecera\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst handleImportJson = async file => {\n  try {\n    const text = await file.text();\n    const data = JSON.parse(text);\n    if (data.name && data.steps) {\n      // Adaptar a formato interno: stepsByPhase debe ser Record<string, Record<string, Step>>\n      const newStepsByPhase = {};\n      Object.entries(data.steps).forEach(([phaseId, steps]) => {\n        const stepsObj = {};\n        Object.entries(steps).forEach(([stepId, config], idx) => {\n          stepsObj[stepId] = {\n            id: stepId,\n            type: stepId.split('_').slice(1).join('_'),\n            order: idx + 1,\n            config\n          };\n        });\n        newStepsByPhase[phaseId] = stepsObj;\n      });\n      // setStepsByPhase(newStepsByPhase);\n      // setSelectedPhase(Object.keys(newStepsByPhase)[0] || '1');\n      // setSelectedStepIdx(null);\n    } else {\n      alert('El archivo JSON no tiene el formato esperado.');\n    }\n  } catch (err) {\n    alert('Error leyendo el archivo JSON.');\n  }\n};\n\n// Mock de steps/componentes disponibles\nconst availableComponents = [{\n  type: 'checkOracle',\n  label: 'Check Oracle'\n}, {\n  type: 'balanceAndPosition',\n  label: 'Balance & Position'\n}, {\n  type: 'sendYarc',\n  label: 'Send Yarc'\n}, {\n  type: 'manualCrossing',\n  label: 'Manual Crossing'\n}, {\n  type: 'alert',\n  label: 'Alert'\n}, {\n  type: 'cleanData',\n  label: 'Clean Data'\n}];\nfunction App() {\n  _s();\n  var _stepsByPhase$selecte, _stepsByPhase$selecte2, _stepsByPhase$selecte3, _stepsByPhase$selecte4;\n  // Estado para los steps agrupados por fase (steps: Record<string, Step[]>)\n  const [stepsByPhase, setStepsByPhase] = useState({\n    '1': {}\n  });\n  const [selectedPhase, setSelectedPhase] = useState('1');\n  const [selectedStepIdx, setSelectedStepIdx] = useState(null);\n  const [jsonName, setJsonName] = useState('Nuevo JSON de Prueba');\n\n  // Añadir una nueva fase\n  const addPhase = () => {\n    const phaseIds = Object.keys(stepsByPhase).map(Number);\n    const newId = (phaseIds.length > 0 ? Math.max(...phaseIds) + 1 : 1).toString();\n    setStepsByPhase({\n      ...stepsByPhase,\n      [newId]: []\n    });\n    setSelectedPhase(newId);\n    setSelectedStepIdx(null);\n  };\n\n  // Añadir un nuevo step a la fase seleccionada\n  const addStep = type => {\n    const steps = stepsByPhase[selectedPhase] || {};\n    // Obtener el siguiente orden y un id único\n    const order = Object.values(steps).length > 0 ? Math.max(...Object.values(steps).map(s => s.order)) + 1 : 1;\n    const id = `${order.toString().padStart(4, '0')}_${type}`;\n    const newStep = {\n      id,\n      type,\n      order,\n      config: {}\n    };\n    setStepsByPhase({\n      ...stepsByPhase,\n      [selectedPhase]: {\n        ...steps,\n        [id]: newStep\n      }\n    });\n  };\n\n  // Seleccionar step para editar\n  const selectStep = (phase, stepId) => {\n    setSelectedPhase(phase);\n    setSelectedStepIdx(stepId);\n  };\n\n  // Actualizar configuración de un step\n  const updateStepConfig = config => {\n    if (!selectedStepIdx) return;\n    const steps = stepsByPhase[selectedPhase] || {};\n    setStepsByPhase({\n      ...stepsByPhase,\n      [selectedPhase]: {\n        ...steps,\n        [selectedStepIdx]: {\n          ...steps[selectedStepIdx],\n          config\n        }\n      }\n    });\n  };\n\n  // Generar JSON final\n  const generateJson = () => ({\n    name: jsonName,\n    steps: Object.fromEntries(Object.entries(stepsByPhase).map(([phaseId, steps]) => [phaseId, Object.fromEntries(Object.entries(steps).map(([stepId, step]) => [stepId, step.config // Solo el objeto config plano, sin id/type/order/config\n    ]))]))\n  });\n\n  // Handler para importar JSON desde SidebarToolbar\n  const handleImportJson = async file => {\n    try {\n      const text = await file.text();\n      const data = JSON.parse(text);\n      if (data.name && data.steps) {\n        setJsonName(data.name);\n        // Adaptar a formato interno: stepsByPhase debe ser Record<string, Record<string, Step>>\n        const newStepsByPhase = {};\n        Object.entries(data.steps).forEach(([phaseId, steps]) => {\n          const stepsObj = {};\n          Object.entries(steps).forEach(([stepId, config], idx) => {\n            stepsObj[stepId] = {\n              id: stepId,\n              type: stepId.split('_').slice(1).join('_'),\n              order: idx + 1,\n              config\n            };\n          });\n          newStepsByPhase[phaseId] = stepsObj;\n        });\n        setStepsByPhase(newStepsByPhase);\n        setSelectedPhase(Object.keys(newStepsByPhase)[0] || '1');\n        setSelectedStepIdx(null);\n      } else {\n        alert('El archivo JSON no tiene el formato esperado.');\n      }\n    } catch (err) {\n      alert('Error leyendo el archivo JSON.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      maxWidth: \"lg\",\n      sx: {\n        py: 4\n      },\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          display: 'flex',\n          justifyContent: 'flex-end',\n          alignItems: 'center',\n          mb: 2\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          accept: \".json,application/json\",\n          style: {\n            display: 'none'\n          },\n          id: \"import-json-file\",\n          type: \"file\",\n          onChange: e => {\n            var _e$target$files;\n            const file = (_e$target$files = e.target.files) === null || _e$target$files === void 0 ? void 0 : _e$target$files[0];\n            if (file) handleImportJson(file);\n            e.target.value = '';\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"import-json-file\",\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"contained\",\n            color: \"primary\",\n            component: \"span\",\n            startIcon: /*#__PURE__*/_jsxDEV(\"span\", {\n              role: \"img\",\n              \"aria-label\": \"import\",\n              children: \"\\uD83D\\uDCC2\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 158,\n              columnNumber: 85\n            }, this),\n            children: \"Importar JSON\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          position: 'relative',\n          textAlign: 'center',\n          mt: 2,\n          mb: 3,\n          py: 4\n        },\n        children: [/*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            position: 'absolute',\n            left: '50%',\n            top: '50%',\n            width: 500,\n            height: 120,\n            transform: 'translate(-50%, -50%)',\n            background: 'linear-gradient(90deg, #1976d2cc 0%, #42a5f5cc 100%)',\n            filter: 'blur(32px)',\n            opacity: 0.25,\n            zIndex: 0,\n            borderRadius: 8\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h3\",\n          sx: {\n            fontWeight: 700,\n            color: 'primary.main',\n            textShadow: '0 2px 12px rgba(25,118,210,0.15)',\n            letterSpacing: 1.5,\n            mb: 1,\n            position: 'relative',\n            zIndex: 1\n          },\n          children: \"Generador de JSONs para Pruebas de Integraci\\xF3n\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center',\n            my: 1,\n            position: 'relative',\n            zIndex: 1\n          },\n          children: /*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              display: 'inline-block',\n              width: '100%',\n              maxWidth: 'min(100%, 700px)',\n              height: 5\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 195,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 3,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          md: 3,\n          children: [availableComponents.map(c => /*#__PURE__*/_jsxDEV(Button, {\n            fullWidth: true,\n            variant: \"outlined\",\n            sx: {\n              my: 1\n            },\n            onClick: () => addStep(c.type),\n            children: c.label\n          }, c.type, false, {\n            fileName: _jsxFileName,\n            lineNumber: 208,\n            columnNumber: 15\n          }, this)), /*#__PURE__*/_jsxDEV(Paper, {\n            sx: {\n              p: 2,\n              mt: 2,\n              borderRadius: 3\n            },\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"h6\",\n              children: \"Fases\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 213,\n              columnNumber: 15\n            }, this), Object.keys(stepsByPhase).map(phaseId => /*#__PURE__*/_jsxDEV(Box, {\n              sx: {\n                display: 'flex',\n                alignItems: 'center',\n                my: 1\n              },\n              children: [/*#__PURE__*/_jsxDEV(Button, {\n                fullWidth: true,\n                variant: selectedPhase === phaseId ? 'contained' : 'outlined',\n                onClick: () => {\n                  setSelectedPhase(phaseId);\n                  setSelectedStepIdx(null);\n                },\n                children: `Fase ${phaseId}`\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 216,\n                columnNumber: 19\n              }, this), Object.keys(stepsByPhase).length > 1 && /*#__PURE__*/_jsxDEV(Button, {\n                size: \"small\",\n                color: \"error\",\n                sx: {\n                  minWidth: 32,\n                  ml: 1\n                },\n                onClick: () => {\n                  const newStepsByPhase = {\n                    ...stepsByPhase\n                  };\n                  delete newStepsByPhase[phaseId];\n                  const phaseKeys = Object.keys(newStepsByPhase);\n                  setStepsByPhase(newStepsByPhase);\n                  if (selectedPhase === phaseId) {\n                    setSelectedPhase(phaseKeys[0] || '1');\n                    setSelectedStepIdx(null);\n                  }\n                },\n                children: \"X\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 220,\n                columnNumber: 21\n              }, this)]\n            }, phaseId, true, {\n              fileName: _jsxFileName,\n              lineNumber: 215,\n              columnNumber: 17\n            }, this)), /*#__PURE__*/_jsxDEV(Button, {\n              fullWidth: true,\n              variant: \"contained\",\n              color: \"secondary\",\n              sx: {\n                mt: 2\n              },\n              onClick: addPhase,\n              children: \"+ A\\xF1adir Fase\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 233,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 212,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          md: 9,\n          children: /*#__PURE__*/_jsxDEV(Grid, {\n            container: true,\n            spacing: 3,\n            sx: {\n              mt: 1\n            },\n            children: [/*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 12,\n              md: 8,\n              children: /*#__PURE__*/_jsxDEV(Paper, {\n                sx: {\n                  p: 3,\n                  mb: 2,\n                  minHeight: 420,\n                  boxShadow: 8,\n                  border: '2px solid #1976d2',\n                  borderRadius: 4,\n                  background: '#f5faff',\n                  display: 'flex',\n                  flexDirection: 'column',\n                  alignItems: 'stretch'\n                },\n                children: [/*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"h5\",\n                  sx: {\n                    mb: 2,\n                    color: '#1976d2',\n                    fontWeight: 700\n                  },\n                  children: \"Visualizaci\\xF3n gr\\xE1fica del flujo\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 242,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(Box, {\n                  sx: {\n                    flex: 1,\n                    minHeight: 320\n                  },\n                  children: /*#__PURE__*/_jsxDEV(FlowView, {\n                    steps: Object.values(stepsByPhase).flatMap(stepsObj => Object.values(stepsObj))\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 244,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 243,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 241,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 240,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 12,\n              md: 4,\n              children: /*#__PURE__*/_jsxDEV(Paper, {\n                sx: {\n                  p: 2,\n                  height: '100%',\n                  borderRadius: 3\n                },\n                children: [/*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"h6\",\n                  children: \"Editor de Step\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 250,\n                  columnNumber: 19\n                }, this), !selectedStepIdx ? /*#__PURE__*/_jsxDEV(Typography, {\n                  color: \"text.secondary\",\n                  children: \"Selecciona un step para editar\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 252,\n                  columnNumber: 21\n                }, this) : /*#__PURE__*/_jsxDEV(StepConfigEditor, {\n                  type: (_stepsByPhase$selecte = stepsByPhase[selectedPhase]) === null || _stepsByPhase$selecte === void 0 ? void 0 : (_stepsByPhase$selecte2 = _stepsByPhase$selecte[selectedStepIdx]) === null || _stepsByPhase$selecte2 === void 0 ? void 0 : _stepsByPhase$selecte2.type,\n                  config: (_stepsByPhase$selecte3 = stepsByPhase[selectedPhase]) === null || _stepsByPhase$selecte3 === void 0 ? void 0 : (_stepsByPhase$selecte4 = _stepsByPhase$selecte3[selectedStepIdx]) === null || _stepsByPhase$selecte4 === void 0 ? void 0 : _stepsByPhase$selecte4.config,\n                  onSave: updateStepConfig\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 254,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 249,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 248,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 239,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n_s(App, \"gXJr6zD2jXQfPyHDBb13hEJFuoo=\");\n_c = App;\n;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","Container","Typography","Box","Button","Paper","Grid","FlowView","StepConfigEditor","jsxDEV","_jsxDEV","Fragment","_Fragment","handleImportJson","file","text","data","JSON","parse","name","steps","newStepsByPhase","Object","entries","forEach","phaseId","stepsObj","stepId","config","idx","id","type","split","slice","join","order","alert","err","availableComponents","label","App","_s","_stepsByPhase$selecte","_stepsByPhase$selecte2","_stepsByPhase$selecte3","_stepsByPhase$selecte4","stepsByPhase","setStepsByPhase","selectedPhase","setSelectedPhase","selectedStepIdx","setSelectedStepIdx","jsonName","setJsonName","addPhase","phaseIds","keys","map","Number","newId","length","Math","max","toString","addStep","values","s","padStart","newStep","selectStep","phase","updateStepConfig","generateJson","fromEntries","step","children","maxWidth","sx","py","display","justifyContent","alignItems","mb","accept","style","onChange","e","_e$target$files","target","files","value","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","variant","color","component","startIcon","role","position","textAlign","mt","left","top","width","height","transform","background","filter","opacity","zIndex","borderRadius","fontWeight","textShadow","letterSpacing","my","container","spacing","item","xs","md","c","fullWidth","onClick","p","size","minWidth","ml","phaseKeys","minHeight","boxShadow","border","flexDirection","flex","flatMap","onSave","_c","$RefreshReg$"],"sources":["/Volumes/MacM2/repositorios/json-creator/src/App.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { Container, Typography, Box, Button, Paper, Grid, TextField } from '@mui/material';\nimport { Step, StepGroup, JsonTemplate } from './models';\nimport FlowView from './FlowView.tsx';\nimport StepConfigEditor from './StepConfigEditor.tsx';\n\n// Botón de importar JSON en la cabecera\nconst handleImportJson = async (file: File) => {\n  try {\n    const text = await file.text();\n    const data = JSON.parse(text);\n    if (data.name && data.steps) {\n      // Adaptar a formato interno: stepsByPhase debe ser Record<string, Record<string, Step>>\n      const newStepsByPhase: Record<string, Record<string, Step>> = {};\n      Object.entries(data.steps).forEach(([phaseId, steps]) => {\n        const stepsObj: Record<string, Step> = {};\n        Object.entries(steps).forEach(([stepId, config], idx) => {\n          stepsObj[stepId] = { id: stepId, type: stepId.split('_').slice(1).join('_'), order: idx + 1, config };\n        });\n        newStepsByPhase[phaseId] = stepsObj;\n      });\n      // setStepsByPhase(newStepsByPhase);\n      // setSelectedPhase(Object.keys(newStepsByPhase)[0] || '1');\n      // setSelectedStepIdx(null);\n    } else {\n      alert('El archivo JSON no tiene el formato esperado.');\n    }\n  } catch (err) {\n    alert('Error leyendo el archivo JSON.');\n  }\n};\n\n// Mock de steps/componentes disponibles\nconst availableComponents = [\n  { type: 'checkOracle', label: 'Check Oracle' },\n  { type: 'balanceAndPosition', label: 'Balance & Position' },\n  { type: 'sendYarc', label: 'Send Yarc' },\n  { type: 'manualCrossing', label: 'Manual Crossing' },\n  { type: 'alert', label: 'Alert' },\n  { type: 'cleanData', label: 'Clean Data' }\n];\n\nfunction App() {\n  // Estado para los steps agrupados por fase (steps: Record<string, Step[]>)\n  const [stepsByPhase, setStepsByPhase] = useState<Record<string, Record<string, Step>>>({\n    '1': {}\n  });\n  const [selectedPhase, setSelectedPhase] = useState<string>('1');\n  const [selectedStepIdx, setSelectedStepIdx] = useState<number | null>(null);\n  const [jsonName, setJsonName] = useState<string>('Nuevo JSON de Prueba');\n\n  // Añadir una nueva fase\n  const addPhase = () => {\n    const phaseIds = Object.keys(stepsByPhase).map(Number);\n    const newId = (phaseIds.length > 0 ? Math.max(...phaseIds) + 1 : 1).toString();\n    setStepsByPhase({ ...stepsByPhase, [newId]: [] });\n    setSelectedPhase(newId);\n    setSelectedStepIdx(null);\n  };\n\n  // Añadir un nuevo step a la fase seleccionada\n  const addStep = (type: string) => {\n    const steps = stepsByPhase[selectedPhase] || {};\n    // Obtener el siguiente orden y un id único\n    const order = Object.values(steps).length > 0 ? Math.max(...Object.values(steps).map(s => s.order)) + 1 : 1;\n    const id = `${order.toString().padStart(4, '0')}_${type}`;\n    const newStep: Step = { id, type, order, config: {} };\n    setStepsByPhase({\n      ...stepsByPhase,\n      [selectedPhase]: {\n        ...steps,\n        [id]: newStep\n      }\n    });\n  };\n\n  // Seleccionar step para editar\n  const selectStep = (phase: string, stepId: string) => {\n    setSelectedPhase(phase);\n    setSelectedStepIdx(stepId);\n  };\n\n  // Actualizar configuración de un step\n  const updateStepConfig = (config: any) => {\n    if (!selectedStepIdx) return;\n    const steps = stepsByPhase[selectedPhase] || {};\n    setStepsByPhase({\n      ...stepsByPhase,\n      [selectedPhase]: {\n        ...steps,\n        [selectedStepIdx]: {\n          ...steps[selectedStepIdx],\n          config\n        }\n      }\n    });\n  };\n\n  // Generar JSON final\n  const generateJson = (): JsonTemplate => ({\n    name: jsonName,\n    steps: Object.fromEntries(\n      Object.entries(stepsByPhase).map(([phaseId, steps]) => [\n        phaseId,\n        Object.fromEntries(\n          Object.entries(steps).map(([stepId, step]) => [\n            stepId,\n            step.config // Solo el objeto config plano, sin id/type/order/config\n          ])\n        )\n      ])\n    )\n  });\n\n  // Handler para importar JSON desde SidebarToolbar\n  const handleImportJson = async (file: File) => {\n    try {\n      const text = await file.text();\n      const data = JSON.parse(text);\n      if (data.name && data.steps) {\n        setJsonName(data.name);\n        // Adaptar a formato interno: stepsByPhase debe ser Record<string, Record<string, Step>>\n        const newStepsByPhase: Record<string, Record<string, Step>> = {};\n        Object.entries(data.steps).forEach(([phaseId, steps]) => {\n          const stepsObj: Record<string, Step> = {};\n          Object.entries(steps).forEach(([stepId, config], idx) => {\n            stepsObj[stepId] = { id: stepId, type: stepId.split('_').slice(1).join('_'), order: idx + 1, config };\n          });\n          newStepsByPhase[phaseId] = stepsObj;\n        });\n        setStepsByPhase(newStepsByPhase);\n        setSelectedPhase(Object.keys(newStepsByPhase)[0] || '1');\n        setSelectedStepIdx(null);\n      } else {\n        alert('El archivo JSON no tiene el formato esperado.');\n      }\n    } catch (err) {\n      alert('Error leyendo el archivo JSON.');\n    }\n  };\n\n  return (\n    <>\n      <Container maxWidth=\"lg\" sx={{ py: 4 }}>\n        <Box sx={{ display: 'flex', justifyContent: 'flex-end', alignItems: 'center', mb: 2 }}>\n          <input\n            accept=\".json,application/json\"\n            style={{ display: 'none' }}\n            id=\"import-json-file\"\n            type=\"file\"\n            onChange={e => {\n              const file = e.target.files?.[0];\n              if (file) handleImportJson(file);\n              e.target.value = '';\n            }}\n          />\n          <label htmlFor=\"import-json-file\">\n            <Button variant=\"contained\" color=\"primary\" component=\"span\" startIcon={<span role=\"img\" aria-label=\"import\">📂</span>}>\n              Importar JSON\n            </Button>\n          </label>\n        </Box>\n        <Box sx={{ position: 'relative', textAlign: 'center', mt: 2, mb: 3, py: 4 }}>\n          {/* Fondo difuminado */}\n          <Box\n            sx={{\n              position: 'absolute',\n              left: '50%',\n              top: '50%',\n              width: 500,\n              height: 120,\n              transform: 'translate(-50%, -50%)',\n              background: 'linear-gradient(90deg, #1976d2cc 0%, #42a5f5cc 100%)',\n              filter: 'blur(32px)',\n              opacity: 0.25,\n              zIndex: 0,\n              borderRadius: 8\n            }}\n          />\n          <Typography\n            variant=\"h3\"\n            sx={{\n              fontWeight: 700,\n              color: 'primary.main',\n              textShadow: '0 2px 12px rgba(25,118,210,0.15)',\n              letterSpacing: 1.5,\n              mb: 1,\n              position: 'relative',\n              zIndex: 1\n            }}\n          >\n            Generador de JSONs para Pruebas de Integración\n          </Typography>\n          <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', my: 1, position: 'relative', zIndex: 1 }}>\n            <Box\n              sx={{\n                display: 'inline-block',\n                width: '100%',\n                maxWidth: 'min(100%, 700px)',\n                height: 5,\n              }}\n            />\n          </Box>\n        </Box>\n        <Grid container spacing={3}>\n          <Grid item xs={12} md={3}>\n            {availableComponents.map(c => (\n              <Button key={c.type} fullWidth variant=\"outlined\" sx={{ my: 1 }} onClick={() => addStep(c.type)}>\n                {c.label}\n              </Button>\n            ))}\n            <Paper sx={{ p: 2, mt: 2, borderRadius: 3 }}>\n              <Typography variant=\"h6\">Fases</Typography>\n              {Object.keys(stepsByPhase).map(phaseId => (\n                <Box key={phaseId} sx={{ display: 'flex', alignItems: 'center', my: 1 }}>\n                  <Button fullWidth variant={selectedPhase === phaseId ? 'contained' : 'outlined'} onClick={() => { setSelectedPhase(phaseId); setSelectedStepIdx(null); }}>\n                    {`Fase ${phaseId}`}\n                  </Button>\n                  {Object.keys(stepsByPhase).length > 1 && (\n                    <Button size=\"small\" color=\"error\" sx={{ minWidth: 32, ml: 1 }} onClick={() => {\n                      const newStepsByPhase = { ...stepsByPhase };\n                      delete newStepsByPhase[phaseId];\n                      const phaseKeys = Object.keys(newStepsByPhase);\n                      setStepsByPhase(newStepsByPhase);\n                      if (selectedPhase === phaseId) {\n                        setSelectedPhase(phaseKeys[0] || '1');\n                        setSelectedStepIdx(null);\n                      }\n                    }}>X</Button>\n                  )}\n                </Box>\n              ))}\n              <Button fullWidth variant=\"contained\" color=\"secondary\" sx={{ mt: 2 }} onClick={addPhase}>\n                + Añadir Fase\n              </Button>\n            </Paper>\n          </Grid>\n          <Grid item xs={12} md={9}>\n            <Grid container spacing={3} sx={{ mt: 1 }}>\n              <Grid item xs={12} md={8}>\n                <Paper sx={{ p: 3, mb: 2, minHeight: 420, boxShadow: 8, border: '2px solid #1976d2', borderRadius: 4, background: '#f5faff', display: 'flex', flexDirection: 'column', alignItems: 'stretch' }}>\n                  <Typography variant=\"h5\" sx={{ mb: 2, color: '#1976d2', fontWeight: 700 }}>Visualización gráfica del flujo</Typography>\n                  <Box sx={{ flex: 1, minHeight: 320 }}>\n                    <FlowView steps={Object.values(stepsByPhase).flatMap(stepsObj => Object.values(stepsObj))} />\n                  </Box>\n                </Paper>\n              </Grid>\n              <Grid item xs={12} md={4}>\n                <Paper sx={{ p: 2, height: '100%', borderRadius: 3 }}>\n                  <Typography variant=\"h6\">Editor de Step</Typography>\n                  {!selectedStepIdx ? (\n                    <Typography color=\"text.secondary\">Selecciona un step para editar</Typography>\n                  ) : (\n                    <StepConfigEditor\n                      type={stepsByPhase[selectedPhase]?.[selectedStepIdx]?.type}\n                      config={stepsByPhase[selectedPhase]?.[selectedStepIdx]?.config}\n                      onSave={updateStepConfig}\n                    />\n                  )}\n                </Paper>\n              </Grid>\n            </Grid>\n          </Grid>\n        </Grid>\n      </Container>\n    </>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}