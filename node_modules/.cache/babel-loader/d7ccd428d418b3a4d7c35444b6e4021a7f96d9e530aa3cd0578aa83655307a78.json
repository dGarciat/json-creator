{"ast":null,"code":"var _jsxFileName = \"/Volumes/MacM2/repositorios/json-creator/src/App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Container, Typography, Box, Button, Paper, Grid, TextField } from '@mui/material';\nimport FlowView from './FlowView.tsx';\nimport StepConfigEditor from './StepConfigEditor.tsx';\n\n// Botón de importar JSON en la cabecera\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst handleImportJson = async file => {\n  try {\n    const text = await file.text();\n    const data = JSON.parse(text);\n    if (data.name && data.steps) {\n      // Adaptar a formato interno: stepsByPhase debe ser Record<string, Record<string, Step>>\n      const newStepsByPhase = {};\n      Object.entries(data.steps).forEach(([phaseId, steps]) => {\n        const stepsObj = {};\n        Object.entries(steps).forEach(([stepId, config], idx) => {\n          stepsObj[stepId] = {\n            id: stepId,\n            type: stepId.split('_').slice(1).join('_'),\n            order: idx + 1,\n            config\n          };\n        });\n        newStepsByPhase[phaseId] = stepsObj;\n      });\n      // setStepsByPhase(newStepsByPhase);\n      // setSelectedPhase(Object.keys(newStepsByPhase)[0] || '1');\n      // setSelectedStepIdx(null);\n    } else {\n      alert('El archivo JSON no tiene el formato esperado.');\n    }\n  } catch (err) {\n    alert('Error leyendo el archivo JSON.');\n  }\n};\n\n// Mock de steps/componentes disponibles\nconst availableComponents = [{\n  type: 'checkOracle',\n  label: 'Check Oracle'\n}, {\n  type: 'balanceAndPosition',\n  label: 'Balance & Position'\n}, {\n  type: 'sendYarc',\n  label: 'Send Yarc'\n}, {\n  type: 'manualCrossing',\n  label: 'Manual Crossing'\n}, {\n  type: 'alert',\n  label: 'Alert'\n}, {\n  type: 'cleanData',\n  label: 'Clean Data'\n}];\nfunction App() {\n  _s();\n  var _stepsByPhase$selecte, _stepsByPhase$selecte2, _stepsByPhase$selecte3, _stepsByPhase$selecte4;\n  // Estado para los steps agrupados por fase (steps: Record<string, Step[]>)\n  const [stepsByPhase, setStepsByPhase] = useState({\n    '1': {}\n  });\n  const [selectedPhase, setSelectedPhase] = useState('1');\n  const [selectedStepIdx, setSelectedStepIdx] = useState(null);\n  const [jsonName, setJsonName] = useState('Nuevo JSON de Prueba');\n\n  // Añadir una nueva fase\n  const addPhase = () => {\n    const phaseIds = Object.keys(stepsByPhase).map(Number);\n    const newId = (phaseIds.length > 0 ? Math.max(...phaseIds) + 1 : 1).toString();\n    setStepsByPhase({\n      ...stepsByPhase,\n      [newId]: {}\n    });\n    setSelectedPhase(newId);\n    setSelectedStepIdx(null);\n  };\n\n  // Añadir un nuevo step a la fase seleccionada\n  const addStep = type => {\n    const steps = stepsByPhase[selectedPhase] || {};\n    // Obtener el siguiente orden y un id único\n    const order = Object.values(steps).length > 0 ? Math.max(...Object.values(steps).map(s => s.order)) + 1 : 1;\n    const id = `${order.toString().padStart(4, '0')}_${type}`;\n    const newStep = {\n      id,\n      type,\n      order,\n      config: {}\n    };\n    setStepsByPhase({\n      ...stepsByPhase,\n      [selectedPhase]: {\n        ...steps,\n        [id]: newStep\n      }\n    });\n  };\n\n  // Seleccionar step para editar\n  const selectStep = (phase, stepId) => {\n    setSelectedPhase(phase);\n    setSelectedStepIdx(stepId);\n  };\n\n  // Actualizar configuración de un step\n  const updateStepConfig = config => {\n    if (!selectedStepIdx) return;\n    const steps = stepsByPhase[selectedPhase] || {};\n    setStepsByPhase({\n      ...stepsByPhase,\n      [selectedPhase]: {\n        ...steps,\n        [selectedStepIdx]: {\n          ...steps[selectedStepIdx],\n          config\n        }\n      }\n    });\n  };\n\n  // Generar JSON final\n  const generateJson = () => ({\n    name: jsonName,\n    steps: Object.fromEntries(Object.entries(stepsByPhase).map(([phaseId, steps]) => [phaseId, Object.fromEntries(Object.entries(steps).map(([stepId, step]) => [stepId, step.config // Solo el objeto config plano, sin id/type/order/config\n    ]))]))\n  });\n\n  // Handler para importar JSON desde SidebarToolbar\n  const handleImportJson = async file => {\n    try {\n      const text = await file.text();\n      const data = JSON.parse(text);\n      if (data.name && data.steps) {\n        setJsonName(data.name);\n        // Adaptar a formato interno: stepsByPhase debe ser Record<string, Record<string, Step>>\n        const newStepsByPhase = {};\n        Object.entries(data.steps).forEach(([phaseId, steps]) => {\n          const stepsObj = {};\n          Object.entries(steps).forEach(([stepId, config], idx) => {\n            stepsObj[stepId] = {\n              id: stepId,\n              type: stepId.split('_').slice(1).join('_'),\n              order: idx + 1,\n              config\n            };\n          });\n          newStepsByPhase[phaseId] = stepsObj;\n        });\n        setStepsByPhase(newStepsByPhase);\n        setSelectedPhase(Object.keys(newStepsByPhase)[0] || '1');\n        setSelectedStepIdx(null);\n      } else {\n        alert('El archivo JSON no tiene el formato esperado.');\n      }\n    } catch (err) {\n      alert('Error leyendo el archivo JSON.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      maxWidth: \"lg\",\n      sx: {\n        py: 4\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h3\",\n        align: \"center\",\n        sx: {\n          fontWeight: 700,\n          mb: 2\n        },\n        children: \"Generador de JSONs para Pruebas de Integraci\\xF3n\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          display: 'flex',\n          justifyContent: 'flex-end',\n          alignItems: 'center',\n          mb: 2\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          accept: \".json,application/json\",\n          style: {\n            display: 'none'\n          },\n          id: \"import-json-file\",\n          type: \"file\",\n          onChange: e => {\n            var _e$target$files;\n            const file = (_e$target$files = e.target.files) === null || _e$target$files === void 0 ? void 0 : _e$target$files[0];\n            if (file) handleImportJson(file);\n            e.target.value = '';\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"import-json-file\",\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"contained\",\n            color: \"primary\",\n            component: \"span\",\n            startIcon: /*#__PURE__*/_jsxDEV(\"span\", {\n              role: \"img\",\n              \"aria-label\": \"import\",\n              children: \"\\uD83D\\uDCC2\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 163,\n              columnNumber: 85\n            }, this),\n            children: \"Importar JSON\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 163,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          display: 'flex',\n          justifyContent: 'center',\n          alignItems: 'center',\n          mb: 3\n        },\n        children: /*#__PURE__*/_jsxDEV(TextField, {\n          label: \"Nombre del JSON\",\n          value: jsonName,\n          onChange: e => setJsonName(e.target.value),\n          variant: \"outlined\",\n          sx: {\n            width: 400\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 3,\n        alignItems: \"stretch\",\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          md: 4,\n          children: /*#__PURE__*/_jsxDEV(Paper, {\n            sx: {\n              p: 2,\n              height: '100%',\n              borderRadius: 3\n            },\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"h6\",\n              children: \"Acciones\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 182,\n              columnNumber: 15\n            }, this), availableComponents.map(c => /*#__PURE__*/_jsxDEV(Button, {\n              fullWidth: true,\n              variant: \"outlined\",\n              sx: {\n                my: 1\n              },\n              onClick: () => addStep(c.type),\n              children: c.label\n            }, c.type, false, {\n              fileName: _jsxFileName,\n              lineNumber: 184,\n              columnNumber: 17\n            }, this)), /*#__PURE__*/_jsxDEV(Box, {\n              sx: {\n                mt: 3\n              },\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"h6\",\n                children: \"Fases\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 189,\n                columnNumber: 17\n              }, this), Object.keys(stepsByPhase).map(phaseId => /*#__PURE__*/_jsxDEV(Box, {\n                sx: {\n                  display: 'flex',\n                  alignItems: 'center',\n                  my: 1\n                },\n                children: [/*#__PURE__*/_jsxDEV(Button, {\n                  fullWidth: true,\n                  variant: selectedPhase === phaseId ? 'contained' : 'outlined',\n                  onClick: () => {\n                    setSelectedPhase(phaseId);\n                    setSelectedStepIdx(null);\n                  },\n                  children: `Fase ${phaseId}`\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 192,\n                  columnNumber: 21\n                }, this), Object.keys(stepsByPhase).length > 1 && /*#__PURE__*/_jsxDEV(Button, {\n                  size: \"small\",\n                  color: \"error\",\n                  sx: {\n                    minWidth: 32,\n                    ml: 1\n                  },\n                  onClick: () => {\n                    const newStepsByPhase = {\n                      ...stepsByPhase\n                    };\n                    delete newStepsByPhase[phaseId];\n                    const phaseKeys = Object.keys(newStepsByPhase);\n                    setStepsByPhase(newStepsByPhase);\n                    if (selectedPhase === phaseId) {\n                      setSelectedPhase(phaseKeys[0] || '1');\n                      setSelectedStepIdx(null);\n                    }\n                  },\n                  children: \"X\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 196,\n                  columnNumber: 23\n                }, this)]\n              }, phaseId, true, {\n                fileName: _jsxFileName,\n                lineNumber: 191,\n                columnNumber: 19\n              }, this)), /*#__PURE__*/_jsxDEV(Button, {\n                fullWidth: true,\n                variant: \"contained\",\n                color: \"secondary\",\n                sx: {\n                  mt: 2\n                },\n                onClick: addPhase,\n                children: \"+ A\\xF1adir Fase\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 209,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 188,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 181,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          md: 8,\n          children: /*#__PURE__*/_jsxDEV(Paper, {\n            sx: {\n              p: 2,\n              height: '100%',\n              borderRadius: 3\n            },\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"h6\",\n              children: \"Editor de Step\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 217,\n              columnNumber: 3\n            }, this), /*#__PURE__*/_jsxDEV(Box, {\n              sx: {\n                mb: 2\n              },\n              children: Object.keys(stepsByPhase[selectedPhase] || {}).length === 0 ? /*#__PURE__*/_jsxDEV(Typography, {\n                color: \"text.secondary\",\n                children: \"No hay steps en esta fase\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 221,\n                columnNumber: 7\n              }, this) : /*#__PURE__*/_jsxDEV(Box, {\n                sx: {\n                  display: 'flex',\n                  flexDirection: 'column',\n                  gap: 1\n                },\n                children: Object.entries(stepsByPhase[selectedPhase] || {}).sort(([, a], [, b]) => a.order - b.order).map(([stepId, step]) => /*#__PURE__*/_jsxDEV(Button, {\n                  variant: selectedStepIdx === stepId ? 'contained' : 'outlined',\n                  color: selectedStepIdx === stepId ? 'primary' : 'inherit',\n                  size: \"small\",\n                  sx: {\n                    justifyContent: 'flex-start',\n                    mb: 0.5,\n                    textTransform: 'none'\n                  },\n                  onClick: () => setSelectedStepIdx(stepId),\n                  children: `${step.order}. ${step.type}`\n                }, stepId, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 227,\n                  columnNumber: 13\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 223,\n                columnNumber: 7\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 219,\n              columnNumber: 3\n            }, this), !selectedStepIdx ? /*#__PURE__*/_jsxDEV(Typography, {\n              color: \"text.secondary\",\n              children: \"Selecciona un step para editar\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 243,\n              columnNumber: 5\n            }, this) : /*#__PURE__*/_jsxDEV(StepConfigEditor, {\n              type: (_stepsByPhase$selecte = stepsByPhase[selectedPhase]) === null || _stepsByPhase$selecte === void 0 ? void 0 : (_stepsByPhase$selecte2 = _stepsByPhase$selecte[selectedStepIdx]) === null || _stepsByPhase$selecte2 === void 0 ? void 0 : _stepsByPhase$selecte2.type,\n              config: (_stepsByPhase$selecte3 = stepsByPhase[selectedPhase]) === null || _stepsByPhase$selecte3 === void 0 ? void 0 : (_stepsByPhase$selecte4 = _stepsByPhase$selecte3[selectedStepIdx]) === null || _stepsByPhase$selecte4 === void 0 ? void 0 : _stepsByPhase$selecte4.config,\n              onSave: updateStepConfig\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 245,\n              columnNumber: 5\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 216,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          mt: 4\n        },\n        children: /*#__PURE__*/_jsxDEV(Paper, {\n          sx: {\n            p: 3,\n            minHeight: 300,\n            boxShadow: 8,\n            border: '2px solid #1976d2',\n            borderRadius: 4,\n            background: '#f5faff',\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'stretch'\n          },\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h5\",\n            sx: {\n              mb: 2,\n              color: '#1976d2',\n              fontWeight: 700\n            },\n            children: \"Visualizaci\\xF3n gr\\xE1fica del flujo\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 257,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              flex: 1,\n              minHeight: 200\n            },\n            children: /*#__PURE__*/_jsxDEV(FlowView, {\n              steps: Object.values(stepsByPhase).flatMap(stepsObj => Object.values(stepsObj))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 259,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 258,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 256,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          mt: 4,\n          mb: 6\n        },\n        children: /*#__PURE__*/_jsxDEV(Paper, {\n          sx: {\n            p: 2,\n            borderRadius: 3,\n            background: '#222',\n            color: '#fff',\n            fontFamily: 'monospace',\n            fontSize: 15\n          },\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            sx: {\n              mb: 1,\n              color: '#90caf9'\n            },\n            children: \"JSON generado\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 266,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n            style: {\n              margin: 0,\n              whiteSpace: 'pre-wrap',\n              wordBreak: 'break-all'\n            },\n            children: JSON.stringify(generateJson(), null, 2)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 267,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 265,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n_s(App, \"gXJr6zD2jXQfPyHDBb13hEJFuoo=\");\n_c = App;\n;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","Container","Typography","Box","Button","Paper","Grid","TextField","FlowView","StepConfigEditor","jsxDEV","_jsxDEV","Fragment","_Fragment","handleImportJson","file","text","data","JSON","parse","name","steps","newStepsByPhase","Object","entries","forEach","phaseId","stepsObj","stepId","config","idx","id","type","split","slice","join","order","alert","err","availableComponents","label","App","_s","_stepsByPhase$selecte","_stepsByPhase$selecte2","_stepsByPhase$selecte3","_stepsByPhase$selecte4","stepsByPhase","setStepsByPhase","selectedPhase","setSelectedPhase","selectedStepIdx","setSelectedStepIdx","jsonName","setJsonName","addPhase","phaseIds","keys","map","Number","newId","length","Math","max","toString","addStep","values","s","padStart","newStep","selectStep","phase","updateStepConfig","generateJson","fromEntries","step","children","maxWidth","sx","py","variant","align","fontWeight","mb","fileName","_jsxFileName","lineNumber","columnNumber","display","justifyContent","alignItems","accept","style","onChange","e","_e$target$files","target","files","value","htmlFor","color","component","startIcon","role","width","container","spacing","item","xs","md","p","height","borderRadius","c","fullWidth","my","onClick","mt","size","minWidth","ml","phaseKeys","flexDirection","gap","sort","a","b","textTransform","onSave","minHeight","boxShadow","border","background","flex","flatMap","fontFamily","fontSize","margin","whiteSpace","wordBreak","stringify","_c","$RefreshReg$"],"sources":["/Volumes/MacM2/repositorios/json-creator/src/App.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { Container, Typography, Box, Button, Paper, Grid, TextField } from '@mui/material';\nimport { Step, StepGroup, JsonTemplate } from './models';\nimport FlowView from './FlowView.tsx';\nimport StepConfigEditor from './StepConfigEditor.tsx';\n\n// Botón de importar JSON en la cabecera\nconst handleImportJson = async (file: File) => {\n  try {\n    const text = await file.text();\n    const data = JSON.parse(text);\n    if (data.name && data.steps) {\n      // Adaptar a formato interno: stepsByPhase debe ser Record<string, Record<string, Step>>\n      const newStepsByPhase: Record<string, Record<string, Step>> = {};\n      Object.entries(data.steps).forEach(([phaseId, steps]) => {\n        const stepsObj: Record<string, Step> = {};\n        Object.entries(steps).forEach(([stepId, config], idx) => {\n          stepsObj[stepId] = { id: stepId, type: stepId.split('_').slice(1).join('_'), order: idx + 1, config };\n        });\n        newStepsByPhase[phaseId] = stepsObj;\n      });\n      // setStepsByPhase(newStepsByPhase);\n      // setSelectedPhase(Object.keys(newStepsByPhase)[0] || '1');\n      // setSelectedStepIdx(null);\n    } else {\n      alert('El archivo JSON no tiene el formato esperado.');\n    }\n  } catch (err) {\n    alert('Error leyendo el archivo JSON.');\n  }\n};\n\n// Mock de steps/componentes disponibles\nconst availableComponents = [\n  { type: 'checkOracle', label: 'Check Oracle' },\n  { type: 'balanceAndPosition', label: 'Balance & Position' },\n  { type: 'sendYarc', label: 'Send Yarc' },\n  { type: 'manualCrossing', label: 'Manual Crossing' },\n  { type: 'alert', label: 'Alert' },\n  { type: 'cleanData', label: 'Clean Data' }\n];\n\nfunction App() {\n  // Estado para los steps agrupados por fase (steps: Record<string, Step[]>)\n  const [stepsByPhase, setStepsByPhase] = useState<Record<string, Record<string, Step>>>({\n    '1': {}\n  });\n  const [selectedPhase, setSelectedPhase] = useState<string>('1');\n  const [selectedStepIdx, setSelectedStepIdx] = useState<string | null>(null);\n  const [jsonName, setJsonName] = useState<string>('Nuevo JSON de Prueba');\n\n  // Añadir una nueva fase\n  const addPhase = () => {\n    const phaseIds = Object.keys(stepsByPhase).map(Number);\n    const newId = (phaseIds.length > 0 ? Math.max(...phaseIds) + 1 : 1).toString();\n    setStepsByPhase({ ...stepsByPhase, [newId]: {} });\n    setSelectedPhase(newId);\n    setSelectedStepIdx(null);\n  };\n\n  // Añadir un nuevo step a la fase seleccionada\n  const addStep = (type: string) => {\n    const steps = stepsByPhase[selectedPhase] || {};\n    // Obtener el siguiente orden y un id único\n    const order = Object.values(steps).length > 0 ? Math.max(...Object.values(steps).map(s => s.order)) + 1 : 1;\n    const id = `${order.toString().padStart(4, '0')}_${type}`;\n    const newStep: Step = { id, type, order, config: {} };\n    setStepsByPhase({\n      ...stepsByPhase,\n      [selectedPhase]: {\n        ...steps,\n        [id]: newStep\n      }\n    });\n  };\n\n  // Seleccionar step para editar\n  const selectStep = (phase: string, stepId: string) => {\n    setSelectedPhase(phase);\n    setSelectedStepIdx(stepId);\n  };\n\n  // Actualizar configuración de un step\n  const updateStepConfig = (config: any) => {\n    if (!selectedStepIdx) return;\n    const steps = stepsByPhase[selectedPhase] || {};\n    setStepsByPhase({\n      ...stepsByPhase,\n      [selectedPhase]: {\n        ...steps,\n        [selectedStepIdx]: {\n          ...steps[selectedStepIdx],\n          config\n        }\n      }\n    });\n  };\n\n  // Generar JSON final\n  const generateJson = (): JsonTemplate => ({\n    name: jsonName,\n    steps: Object.fromEntries(\n      Object.entries(stepsByPhase).map(([phaseId, steps]) => [\n        phaseId,\n        Object.fromEntries(\n          Object.entries(steps).map(([stepId, step]) => [\n            stepId,\n            step.config // Solo el objeto config plano, sin id/type/order/config\n          ])\n        )\n      ])\n    )\n  });\n\n  // Handler para importar JSON desde SidebarToolbar\n  const handleImportJson = async (file: File) => {\n    try {\n      const text = await file.text();\n      const data = JSON.parse(text);\n      if (data.name && data.steps) {\n        setJsonName(data.name);\n        // Adaptar a formato interno: stepsByPhase debe ser Record<string, Record<string, Step>>\n        const newStepsByPhase: Record<string, Record<string, Step>> = {};\n        Object.entries(data.steps).forEach(([phaseId, steps]) => {\n          const stepsObj: Record<string, Step> = {};\n          Object.entries(steps).forEach(([stepId, config], idx) => {\n            stepsObj[stepId] = { id: stepId, type: stepId.split('_').slice(1).join('_'), order: idx + 1, config };\n          });\n          newStepsByPhase[phaseId] = stepsObj;\n        });\n        setStepsByPhase(newStepsByPhase);\n        setSelectedPhase(Object.keys(newStepsByPhase)[0] || '1');\n        setSelectedStepIdx(null);\n      } else {\n        alert('El archivo JSON no tiene el formato esperado.');\n      }\n    } catch (err) {\n      alert('Error leyendo el archivo JSON.');\n    }\n  };\n\n  return (\n    <>\n      <Container maxWidth=\"lg\" sx={{ py: 4 }}>\n        {/* 1. Título */}\n        <Typography variant=\"h3\" align=\"center\" sx={{ fontWeight: 700, mb: 2 }}>\n          Generador de JSONs para Pruebas de Integración\n        </Typography>\n        {/* 2. Importar JSON a la derecha */}\n        <Box sx={{ display: 'flex', justifyContent: 'flex-end', alignItems: 'center', mb: 2 }}>\n          <input\n            accept=\".json,application/json\"\n            style={{ display: 'none' }}\n            id=\"import-json-file\"\n            type=\"file\"\n            onChange={e => {\n              const file = e.target.files?.[0];\n              if (file) handleImportJson(file);\n              e.target.value = '';\n            }}\n          />\n          <label htmlFor=\"import-json-file\">\n            <Button variant=\"contained\" color=\"primary\" component=\"span\" startIcon={<span role=\"img\" aria-label=\"import\">📂</span>}>\n              Importar JSON\n            </Button>\n          </label>\n        </Box>\n        {/* 3. Editar nombre del JSON */}\n        <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', mb: 3 }}>\n          <TextField\n            label=\"Nombre del JSON\"\n            value={jsonName}\n            onChange={e => setJsonName(e.target.value)}\n            variant=\"outlined\"\n            sx={{ width: 400 }}\n          />\n        </Box>\n        {/* 4. Acciones/Fases | Editor de Step */}\n        <Grid container spacing={3} alignItems=\"stretch\">\n          <Grid item xs={12} md={4}>\n            <Paper sx={{ p: 2, height: '100%', borderRadius: 3 }}>\n              <Typography variant=\"h6\">Acciones</Typography>\n              {availableComponents.map(c => (\n                <Button key={c.type} fullWidth variant=\"outlined\" sx={{ my: 1 }} onClick={() => addStep(c.type)}>\n                  {c.label}\n                </Button>\n              ))}\n              <Box sx={{ mt: 3 }}>\n                <Typography variant=\"h6\">Fases</Typography>\n                {Object.keys(stepsByPhase).map(phaseId => (\n                  <Box key={phaseId} sx={{ display: 'flex', alignItems: 'center', my: 1 }}>\n                    <Button fullWidth variant={selectedPhase === phaseId ? 'contained' : 'outlined'} onClick={() => { setSelectedPhase(phaseId); setSelectedStepIdx(null); }}>\n                      {`Fase ${phaseId}`}\n                    </Button>\n                    {Object.keys(stepsByPhase).length > 1 && (\n                      <Button size=\"small\" color=\"error\" sx={{ minWidth: 32, ml: 1 }} onClick={() => {\n                        const newStepsByPhase = { ...stepsByPhase };\n                        delete newStepsByPhase[phaseId];\n                        const phaseKeys = Object.keys(newStepsByPhase);\n                        setStepsByPhase(newStepsByPhase);\n                        if (selectedPhase === phaseId) {\n                          setSelectedPhase(phaseKeys[0] || '1');\n                          setSelectedStepIdx(null);\n                        }\n                      }}>X</Button>\n                    )}\n                  </Box>\n                ))}\n                <Button fullWidth variant=\"contained\" color=\"secondary\" sx={{ mt: 2 }} onClick={addPhase}>\n                  + Añadir Fase\n                </Button>\n              </Box>\n            </Paper>\n          </Grid>\n          <Grid item xs={12} md={8}>\n            <Paper sx={{ p: 2, height: '100%', borderRadius: 3 }}>\n  <Typography variant=\"h6\">Editor de Step</Typography>\n  {/* Lista de steps de la fase seleccionada */}\n  <Box sx={{ mb: 2 }}>\n    {Object.keys(stepsByPhase[selectedPhase] || {}).length === 0 ? (\n      <Typography color=\"text.secondary\">No hay steps en esta fase</Typography>\n    ) : (\n      <Box sx={{ display: 'flex', flexDirection: 'column', gap: 1 }}>\n        {Object.entries(stepsByPhase[selectedPhase] || {})\n          .sort(([, a], [, b]) => a.order - b.order)\n          .map(([stepId, step]) => (\n            <Button\n              key={stepId}\n              variant={selectedStepIdx === stepId ? 'contained' : 'outlined'}\n              color={selectedStepIdx === stepId ? 'primary' : 'inherit'}\n              size=\"small\"\n              sx={{ justifyContent: 'flex-start', mb: 0.5, textTransform: 'none' }}\n              onClick={() => setSelectedStepIdx(stepId)}\n            >\n              {`${step.order}. ${step.type}`}\n            </Button>\n          ))}\n      </Box>\n    )}\n  </Box>\n  {/* Editor del step seleccionado */}\n  {!selectedStepIdx ? (\n    <Typography color=\"text.secondary\">Selecciona un step para editar</Typography>\n  ) : (\n    <StepConfigEditor\n      type={stepsByPhase[selectedPhase]?.[selectedStepIdx]?.type}\n      config={stepsByPhase[selectedPhase]?.[selectedStepIdx]?.config}\n      onSave={updateStepConfig}\n    />\n  )}\n</Paper>\n          </Grid>\n        </Grid>\n        {/* 5. Visualizador gráfico de flujo */}\n        <Box sx={{ mt: 4 }}>\n          <Paper sx={{ p: 3, minHeight: 300, boxShadow: 8, border: '2px solid #1976d2', borderRadius: 4, background: '#f5faff', display: 'flex', flexDirection: 'column', alignItems: 'stretch' }}>\n            <Typography variant=\"h5\" sx={{ mb: 2, color: '#1976d2', fontWeight: 700 }}>Visualización gráfica del flujo</Typography>\n            <Box sx={{ flex: 1, minHeight: 200 }}>\n              <FlowView steps={Object.values(stepsByPhase).flatMap(stepsObj => Object.values(stepsObj))} />\n            </Box>\n          </Paper>\n        </Box>\n        {/* 6. Visualizador del JSON */}\n        <Box sx={{ mt: 4, mb: 6 }}>\n          <Paper sx={{ p: 2, borderRadius: 3, background: '#222', color: '#fff', fontFamily: 'monospace', fontSize: 15 }}>\n            <Typography variant=\"h6\" sx={{ mb: 1, color: '#90caf9' }}>JSON generado</Typography>\n            <pre style={{ margin: 0, whiteSpace: 'pre-wrap', wordBreak: 'break-all' }}>{JSON.stringify(generateJson(), null, 2)}</pre>\n          </Paper>\n        </Box>\n      </Container>\n    </>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}