{"ast":null,"code":"var _jsxFileName = \"/Volumes/MacM2/repositorios/json-creator/src/FlowView.tsx\";\nimport React from 'react';\nimport ReactFlow, { MiniMap, Controls, Background } from 'react-flow-renderer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst phaseColors = ['#ffe0b2',\n// Phase 1 - orange\n'#e3f2fd',\n// Phase 2 - blue\n'#c8e6c9',\n// Phase 3 - green\n'#f8bbd0',\n// Phase 4 - pink\n'#fff9c4',\n// Phase 5 - yellow\n'#d1c4e9',\n// Phase 6 - purple\n'#b2dfdb' // Phase 7 - teal\n];\nconst getNodesAndEdges = (steps, selectedStepId, stepsByPhase) => {\n  // Build a map: stepId -> phaseIdx\n  let stepPhaseMap = {};\n  if (stepsByPhase) {\n    Object.entries(stepsByPhase).forEach(([phase, steps], idx) => {\n      steps.forEach(s => {\n        stepPhaseMap[s.id] = idx;\n      });\n    });\n  }\n  const nodes = steps.map((step, idx) => {\n    var _stepPhaseMap$step$id;\n    const isSelected = step.id === selectedStepId;\n    const phaseIdx = (_stepPhaseMap$step$id = stepPhaseMap[step.id]) !== null && _stepPhaseMap$step$id !== void 0 ? _stepPhaseMap$step$id : 0;\n    const baseColor = phaseColors[phaseIdx % phaseColors.length];\n    return {\n      id: step.id,\n      data: {\n        label: /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            fontWeight: isSelected ? 800 : 500,\n            color: isSelected ? '#ff9800' : '#1976d2',\n            fontSize: isSelected ? 18 : 15,\n            letterSpacing: 1\n          },\n          children: `${step.order}. ${step.type}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 11\n        }, this)\n      },\n      position: {\n        x: 100,\n        y: idx * 100\n      },\n      style: {\n        minWidth: 200,\n        padding: 12,\n        borderRadius: 10,\n        border: isSelected ? '4px dashed #ff9800' : `2px solid ${baseColor}`,\n        background: isSelected ? '#fffbe6' : baseColor,\n        boxShadow: isSelected ? '0 0 0 6px #ff980088' : '0 1px 4px #bbb8',\n        animation: isSelected ? 'blinker 0.9s linear infinite' : undefined,\n        transition: 'border 0.2s, box-shadow 0.2s, background 0.2s',\n        zIndex: isSelected ? 10 : 1\n      }\n    };\n  });\n  const edges = steps.slice(1).map((step, idx) => ({\n    id: `e${steps[idx].id}-${step.id}`,\n    source: steps[idx].id,\n    target: step.id,\n    animated: true,\n    style: {\n      stroke: '#1976d2',\n      strokeWidth: 2\n    }\n  }));\n  return {\n    nodes,\n    edges\n  };\n};\nconst FlowView = ({\n  steps,\n  selectedStepId,\n  stepsByPhase\n}) => {\n  // Grouping logic: if stepsByPhase provided, use it, else fall back to flat steps\n  let grouped = [];\n  if (stepsByPhase) {\n    grouped = Object.entries(stepsByPhase).sort(([a], [b]) => Number(a) - Number(b)).map(([phase, steps]) => ({\n      phase,\n      steps\n    }));\n  } else {\n    grouped = [{\n      phase: '1',\n      steps\n    }];\n  }\n\n  // Calculate nodes and edges for all steps\n  const allSteps = grouped.flatMap(g => g.steps);\n  const {\n    nodes,\n    edges\n  } = getNodesAndEdges(allSteps, selectedStepId, stepsByPhase);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: '60vh',\n      minHeight: 400,\n      width: '100%',\n      background: '#f4f6fb',\n      borderRadius: 8,\n      position: 'relative'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"style\", {\n      children: `\n        @keyframes blinker {\n          50% { border-color: #fff; box-shadow: 0 0 0 8px #ff980044; }\n        }\n      `\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ReactFlow, {\n      nodes: nodes,\n      edges: edges,\n      fitView: true,\n      fitViewOptions: {\n        padding: 0.2\n      },\n      minZoom: 0.2,\n      maxZoom: 2,\n      children: [/*#__PURE__*/_jsxDEV(MiniMap, {\n        nodeColor: () => '#1976d2'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Background, {\n        gap: 16,\n        color: \"#e3e3e3\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n};\n_c = FlowView;\nexport default FlowView;\nvar _c;\n$RefreshReg$(_c, \"FlowView\");","map":{"version":3,"names":["React","ReactFlow","MiniMap","Controls","Background","jsxDEV","_jsxDEV","phaseColors","getNodesAndEdges","steps","selectedStepId","stepsByPhase","stepPhaseMap","Object","entries","forEach","phase","idx","s","id","nodes","map","step","_stepPhaseMap$step$id","isSelected","phaseIdx","baseColor","length","data","label","style","fontWeight","color","fontSize","letterSpacing","children","order","type","fileName","_jsxFileName","lineNumber","columnNumber","position","x","y","minWidth","padding","borderRadius","border","background","boxShadow","animation","undefined","transition","zIndex","edges","slice","source","target","animated","stroke","strokeWidth","FlowView","grouped","sort","a","b","Number","allSteps","flatMap","g","height","minHeight","width","fitView","fitViewOptions","minZoom","maxZoom","nodeColor","gap","_c","$RefreshReg$"],"sources":["/Volumes/MacM2/repositorios/json-creator/src/FlowView.tsx"],"sourcesContent":["import React from 'react';\nimport ReactFlow, { MiniMap, Controls, Background, Node, Edge } from 'react-flow-renderer';\nimport { Step } from './models';\n\ninterface FlowViewProps {\n  steps: Step[];\n  selectedStepId?: string;\n  stepsByPhase?: Record<string, Step[]>;\n}\n\nconst phaseColors = [\n  '#ffe0b2', // Phase 1 - orange\n  '#e3f2fd', // Phase 2 - blue\n  '#c8e6c9', // Phase 3 - green\n  '#f8bbd0', // Phase 4 - pink\n  '#fff9c4', // Phase 5 - yellow\n  '#d1c4e9', // Phase 6 - purple\n  '#b2dfdb', // Phase 7 - teal\n];\n\nconst getNodesAndEdges = (steps: Step[], selectedStepId?: string, stepsByPhase?: Record<string, Step[]>): { nodes: Node[]; edges: Edge[] } => {\n  // Build a map: stepId -> phaseIdx\n  let stepPhaseMap: Record<string, number> = {};\n  if (stepsByPhase) {\n    Object.entries(stepsByPhase).forEach(([phase, steps], idx) => {\n      steps.forEach(s => {\n        stepPhaseMap[s.id] = idx;\n      });\n    });\n  }\n  const nodes: Node[] = steps.map((step, idx) => {\n    const isSelected = step.id === selectedStepId;\n    const phaseIdx = stepPhaseMap[step.id] ?? 0;\n    const baseColor = phaseColors[phaseIdx % phaseColors.length];\n    return {\n      id: step.id,\n      data: {\n        label: (\n          <span style={{\n            fontWeight: isSelected ? 800 : 500,\n            color: isSelected ? '#ff9800' : '#1976d2',\n            fontSize: isSelected ? 18 : 15,\n            letterSpacing: 1,\n          }}>{`${step.order}. ${step.type}`}</span>\n        )\n      },\n      position: { x: 100, y: idx * 100 },\n      style: {\n        minWidth: 200,\n        padding: 12,\n        borderRadius: 10,\n        border: isSelected\n          ? '4px dashed #ff9800'\n          : `2px solid ${baseColor}`,\n        background: isSelected ? '#fffbe6' : baseColor,\n        boxShadow: isSelected ? '0 0 0 6px #ff980088' : '0 1px 4px #bbb8',\n        animation: isSelected ? 'blinker 0.9s linear infinite' : undefined,\n        transition: 'border 0.2s, box-shadow 0.2s, background 0.2s',\n        zIndex: isSelected ? 10 : 1,\n      },\n    };\n  });\n  const edges: Edge[] = steps.slice(1).map((step, idx) => ({\n    id: `e${steps[idx].id}-${step.id}`,\n    source: steps[idx].id,\n    target: step.id,\n    animated: true,\n    style: { stroke: '#1976d2', strokeWidth: 2 }\n  }));\n  return { nodes, edges };\n};\n\n\nconst FlowView: React.FC<FlowViewProps> = ({ steps, selectedStepId, stepsByPhase }) => {\n  // Grouping logic: if stepsByPhase provided, use it, else fall back to flat steps\n  let grouped: Array<{ phase: string; steps: Step[] }> = [];\n  if (stepsByPhase) {\n    grouped = Object.entries(stepsByPhase)\n      .sort(([a], [b]) => Number(a) - Number(b))\n      .map(([phase, steps]) => ({ phase, steps }));\n  } else {\n    grouped = [{ phase: '1', steps }];\n  }\n\n  // Calculate nodes and edges for all steps\n  const allSteps = grouped.flatMap(g => g.steps);\n  const { nodes, edges } = getNodesAndEdges(allSteps, selectedStepId, stepsByPhase);\n\n\n  return (\n    <div style={{ height: '60vh', minHeight: 400, width: '100%', background: '#f4f6fb', borderRadius: 8, position: 'relative' }}>\n      <style>{`\n        @keyframes blinker {\n          50% { border-color: #fff; box-shadow: 0 0 0 8px #ff980044; }\n        }\n      `}</style>\n\n      <ReactFlow\n        nodes={nodes}\n        edges={edges}\n        fitView\n        fitViewOptions={{ padding: 0.2 }}\n        minZoom={0.2}\n        maxZoom={2}\n      >\n        <MiniMap nodeColor={() => '#1976d2'} />\n        <Controls />\n        <Background gap={16} color=\"#e3e3e3\" />\n      </ReactFlow>\n    </div>\n  );\n};\n\nexport default FlowView;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}